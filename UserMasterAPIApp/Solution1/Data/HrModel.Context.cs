//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SampleDemoEntities : DbContext
    {
        public SampleDemoEntities()
            : base("name=SampleDemoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<UserMaster> UserMasters { get; set; }
        public virtual DbSet<RoleMaster> RoleMasters { get; set; }
    
        public virtual ObjectResult<GetUsermaster_Result> GetUsermaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUsermaster_Result>("GetUsermaster");
        }
    
        public virtual ObjectResult<Nullable<decimal>> createUserMaster(Nullable<int> userId, string fullname, string emailId, string password, Nullable<bool> active, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("Fullname", fullname) :
                new ObjectParameter("Fullname", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var activeParameter = active.HasValue ?
                new ObjectParameter("Active", active) :
                new ObjectParameter("Active", typeof(bool));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("createUserMaster", userIdParameter, fullnameParameter, emailIdParameter, passwordParameter, activeParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual int deleteUserMaster(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteUserMaster", userIdParameter);
        }
    
        public virtual int updateUserMaster(Nullable<int> userId, string fullname, string emailId, string password, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            var fullnameParameter = fullname != null ?
                new ObjectParameter("Fullname", fullname) :
                new ObjectParameter("Fullname", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateUserMaster", userIdParameter, fullnameParameter, emailIdParameter, passwordParameter, updatedByParameter, updatedDateParameter);
        }
    
        public virtual ObjectResult<ValidateUser_Result> ValidateUser(string emailId, string password)
        {
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ValidateUser_Result>("ValidateUser", emailIdParameter, passwordParameter);
        }
    
        public virtual ObjectResult<GetRoleMaster_Result> GetRoleMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRoleMaster_Result>("GetRoleMaster");
        }
    
        public virtual int DeleteRoleMaster(Nullable<int> roleId)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteRoleMaster", roleIdParameter);
        }
    
        public virtual int updateRoleMaster(Nullable<int> roleId, string roleName, string roleDescription)
        {
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var roleDescriptionParameter = roleDescription != null ?
                new ObjectParameter("RoleDescription", roleDescription) :
                new ObjectParameter("RoleDescription", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateRoleMaster", roleIdParameter, roleNameParameter, roleDescriptionParameter);
        }
    }
}
